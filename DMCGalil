#AUTO
#INIT
ST;AM;MO
OE0,0,0
ER-1,-1,-1
DP0,0,0
OE1,1,1
CN -1,-1,-1
MT-1,-1,1
CE 2,2,0
KDA=2700
KPA=60
KDB=2700
KPB=200
KDC=2800.1250
KPC=500.1250
NO-----------------ORIGINAL VARIABLES AND ARRAYS-----------------------------
RUNONCE=0
CMD ="*"
PTSIZE=100
DA*[0]
UNITS=0
GB_REVS=5
PP_REV=1000
MMU=25.4
IF(UNITS=0)
SCALE=(PP_REV*GB_REVS)
ENDIF
IF(UNITS=1)
SCALE=(PP_REV*GB_REVS)/MMU
ENDIF
STOPTIME=0
DMPTX[PTSIZE]
DMPTY[PTSIZE]
DMPTZ[PTSIZE]
DMOUT[PTSIZE]
DMSEQNM[PTSIZE]
DMMODET[PTSIZE]
DMSEQX[PTSIZE]
DMSEQY[PTSIZE]
DMSEQZ[PTSIZE]
DMSEQOUT[PTSIZE]
DMSEQNUM[PTSIZE]
DMSEQMODET[PTSIZE]
DMHMIINPTS[5]
PTS=0
LASTSEQ=0
UNITS=0
PTHMISZE=100
DMOUTD[8]
UNIT=0
DMOUTSTA[8]
STPTM=0
JS#CLEAR
DWELLX=0;DWELLY=0;DWELLZ=0
PURGEX=10000;PURGEY=5000;PURGEZ=3000
TOOLZ=0;TOOLX=0;TOOLY=0
MOTION=0
NSHOME=0
NSGO=0
SINGLE=0
PURGE=0
PURGTIME=0
DMRecipe[1500];DMA[10];DMH[10];DMarray[10]
DMCONTROL[20]
CMD="*"
NSMO=2
NSYE=2013
ERROR=600
TLIMIT=9.9
PT=1
FINDEX=0
DWELLX=.5
DWELLY=.5
OFFX=0
OFFY=0
OFFZ=0
CC 9600,0,1,0
CI 2
#MAIN
JS#CLEAR
MG{P2}"    DARING COMPANY"
MG{P2}"    GANTRY SYSTEM "
MG{P2}
MG{P2}
MG{P2}"    (248) 340-0741"
MG{P2}" CONNECTING........"
MAXSPEED =600000
VOL=MAXSPEED/4
SPEEDF=.2
JOGACC=100
MAXJOG=200000
JOGSPEED=MAXJOG
LASTSEQ=1
OUTNUM=0
OUTSTA[0]=0
PURGTIME=4000
GB_REVS=1.25
PP_REV=8000
MMU=25.4
VOL=MAXSPEED/4
SCALE=PP_REV*GB_REVS
SYSSPEED =(MAXSPEED)*(SPEEDF)
VS(((VOL*SCALE)*SPEEDF)
INC= 2000
NSDA=4
#LOOP
JS#HOME
JS#CLEAR
JS#MBINIT
#JOG
IF(PTX[0]=0)
JS#CLEAR
JS#MENU
MG{P2}"NO DATA LOADED"
WT1000
ELSE
JS#CLEAR
MG{P2}"SYSTEM CAN RUN"
MG{P2}"PARAMETERS LOADED"
MG{P2}"WOULD YOU LIKE TO RUN ?"
MG{P2}"1) YES"
MG{P2}"2) NO"
MG{P2}
JS#IN2
IF(INPUT=2)
MODE=1
JS#MENU
ENDIF
IF(INPUT=1)
MODE=2
JS#RUNMODE
ENDIF
INPUT="*"
ENDIF
JP#JOG
#MENU
#JOGSEL
JS#CLEAR
MG{P2}"      SYSTEM JOGGING "
MG{P2}"        AVAILABLE   "
MG{P2}" X AXIS POS",_TPX/SCALE
MG{P2}" Y AXIS POS",_TPY/SCALE
MG{P2}" Z AXIS POS",_TPZ/SCALE
MG{P2}"M - Restart System" 
#JOGGING
JS#WAITD
JS#READHMI,CMD="B"
JS#WRTHMI,CMD ="G"
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SETUP,CMD="U"
JS#MANUAL,CMD ="X"
JS#EDTSEQ,CMD ="F"
JS#TEACH,CMD="A"
JS#JOGCHK,CMD="P"
JS#MODSTRT,CMD ="K"
JS#INCCH,CMD ="Q"
JS#RESTART, CMD = "M"

IF (CMD = "M") 
    JP #RESTART
ENDIF


CMD ="*"
JP#JOGSEL
EN
#JOGCHK
CMD ="*"
IF(PTX[0]<>0)
JS#JOG
ENDIF
JS#MENU
#MODSTRT
JS#CLEAR
MG{P2}"REMOTE START"
MG{P2}"ENABLED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}"ESC TO END"
#MDST
STARTPB=@IN[1]
PURGEPB=@IN[2]
IF(STARTPB=0)
JS#RUNMODE
ENDIF
IF(PURGEPB=0)
JS#PURGESY
ENDIF
IF(CMD="Z")
JS#JOGSEL
ENDIF
JP#MDST
EN
#JOGXPL;SPJOGSPEED;PRINC;MOTION=1;BGX;AM;CMD="*";MOTION=0;EN
#JOGXMN;SPJOGSPEED;PR-INC;MOTION=1;BGX;AM;CMD="*";MOTION=0;EN
#JOGYPL;SP,JOGSPEED;PR,INC;MOTION=1;BGY;AM;CMD="*";MOTION=0;EN
#JOGYMN;SP,JOGSPEED;PR,-INC;MOTION=1;BGY;AM;CMD="*";MOTION=0;EN
#JOGZPL;SP,,JOGSPEED;PR,,INC;MOTION=1;BGZ;AM;CMD="*";MOTION=0;EN
#JOGZMN;SP,,JOGSPEED;PR,,-INC;MOTION=1;BGZ;AM;CMD="*";MOTION=0;EN
EN


#RESTART
JS#CLEAR
MG{P2}"ARE YOU SURE YOU WANT TO RESTART?"
MG{P2}"1) YES"
MG{P2}"2) NO"
JS#IN2  

IF(INPUT=1)  
    MO	 
    JP#HOME
    SH
    JP#MENU
ENDIF

IF(INPUT=2)  
    JP#JOGSEL  
ENDIF
 
EN

#SETUP
SH
CMD ="*"
JS#CLEAR
MG{P2}"     SETUP MENU"
MG{P2}"1) SET PURGE"
MG{P2}"2) SET DWELL POSITION"
MG{P2}"3) SET TOOLING POSITION"
MG{P2}"4) HOME SYSTEM"
MG{P2}"9) EXIT MENU"
JS#IN
#PURGE
IF(INPUT=1)
JS#CLEAR
#PRGMNU
MG{P2}"SETTING PURGE"
MG{P2}"1) PURGE TIMER"
MG{P2}"2) PURGE POSITION"
MG{P2}"9) EXIT"
MG{P2}
MG{P2}
CMD ="*"
JS#IN
IF(INPUT=1)
INPUT="*"
JS#CLEAR
MG{P2}" SETTING PURGE TIME"
MG{P2}"    IN SECONDS"
MG{P2}"PURGE TIME IS, ",PURGTIME
MG{P2}"ENTER NEW PURGE TIME"
MG{P2}
MG{P2}
MG{P2}
JS#IN
PURGTIME=INPUT
JS#CLEAR
MG{P2}"NEW PURGE TIME"
MG{P2}PURGTIME," SECONDS"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT2000
ENDIF
IF(INPUT=2)
INPUT="*"
JS#CLEAR
MG{P2}" SETTING PURGE POSITION"
MG{P2}
MG"PURGE X ",PURGEX
MG"PURGE Y ",PURGEY
MG"PURGE Z ",PURGEZ
MG{P2}"1) MOVE TO PURGE POS"
MG{P2}"2) TEACH NEW PURGE POS"
MG{P2}"9) EXIT"
JS#IN
PURGTIME=INPUT
JS#CLEAR
IF(INPUT=1)
INPUT="*"
#RUNPRGE
JS#CLEAR
MG{P2}"MOVING TO PURGE"
MG{P2}"MAKE SURE ALL IS CLEAR"
MG{P2}
MG{P2}
MG{P2}
WT3000
SPSYSSPEED,SYSSPEED,SYSSPEED
PAPURGEX,PURGEY,PURGEZ
JS#CLEAR
MG{P2}"MOVING TO PURGE POS"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MOTION=1
BGXYZ
AM
MOTION=0
JS#CLEAR
MG{P2}"MOVING TO PURGE"
MG{P2}"COMPLETED"
MG{P2}"PURGE X ",PURGEX
MG{P2}"PURGE Y ",PURGEY
MG{P2}"PURGE Z ",PURGEZ
WT3000
ENDIF
IF(INPUT=2)
JS#CLEAR
MG{P2}"TEACH NEW POSITION"
MG{P2}"JOG TO POSITION"
MG{P2}"PRESS SAVE MOVE ON"
MG{P2}"PENDANT"
MG{P2}
MG{P2}
#LOOP2
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVEPRG,CMD="I"
IF(CMD <>"I")
JP#LOOP2
ENDIF
JS#CLEAR
MG{P2}"PURGE POSITION SAVED"
MG{P2}"PURGE X ",PURGEX
MG{P2}"PURGE Y ",PURGEY
MG{P2}"PURGE Z ",PURGEZ
MG{P2}
MG{P2}
WT3000
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING PURGE"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING PURGE"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
ENDIF
IF(INPUT=2)
JS#CLEAR
MG{P2}"SETTING DWELL"
MG{P2}"1) DWELL POSITION"
MG{P2}
MG{P2}"9) EXIT"
MG{P2}
MG{P2}
CMD ="*"
JS#IN
IF(INPUT=1)
INPUT="*"
JS#CLEAR
MG{P2}" SETTING DWELL POSITION"
MG{P2}
MG"DWELL X ",DWELLX
MG"DWELL Y ",DWELLY
MG"DWELL Z ",DWELLZ
MG{P2}"1) MOVE TO DWELL POS"
MG{P2}"2) TEACH NEW DWELL POS"
MG{P2}"9) EXIT"
JS#IN
JS#CLEAR
IF(INPUT=1)
INPUT="*"
JS#CLEAR
MG{P2}"MOVING TO DWELL"
MG{P2}"MAKE SURE ALL IS CLEAR"
MG{P2}
MG{P2}
MG{P2}
WT3000
SPSYSSPEED,SYSSPEED,SYSSPEED
PADWELLX,DWELLY,DWELLZ
JS#CLEAR
MG{P2}"MOVING TO DWELL POS"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MOTION=1
BGXYZ
AM
MOTION=0
JS#CLEAR
MG{P2}"MOVING TO DWELL"
MG{P2}"COMPLETED"
MG{P2}"DWELL X ",DWELLX
MG{P2}"DWELL Y ",DWELLY
MG{P2}"DWELL Z ",DWELLZ
WT3000
ENDIF
IF(INPUT=2)
JS#CLEAR
MG{P2}"TEACH NEW POSITION"
MG{P2}"JOG TO POSITION"
MG{P2}"PRESS SAVE MOVE ON"
MG{P2}"PENDANT"
MG{P2}
MG{P2}
#LOOP3
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVDPRG,CMD="I"
IF(CMD <>"I")
JP#LOOP3
ENDIF
JS#CLEAR
MG{P2}"DWELL POSITION SAVED"
MG{P2}"DWELL X ",DWELLX
MG{P2}"DWELL Y ",DWELLY
MG{P2}"DWELL Z ",DWELLZ
MG{P2}
MG{P2}
WT3000
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING DWELL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING DWELL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
IF(CMD =9)
JS#CLEAR
MG{P2}"EXITING DWELL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
JS#SETUP
ENDIF
IF(INPUT=3)
JS#CLEAR
MG{P2}"SETTING TOOL"
MG{P2}"1) TOOL POSITION"
MG{P2}
MG{P2}"9) EXIT"
MG{P2}
MG{P2}
CMD ="*"
JS#IN
IF(INPUT=1)
INPUT="*"
JS#CLEAR
MG{P2}" SETTING TOOL POSITION"
MG{P2}
MG"TOOL X ",TOOLX
MG"TOOL Y ",TOOLY
MG"TOOL Z ",TOOLZ
MG{P2}"1) MOVE TO TOOL POS"
MG{P2}"2) TEACH NEW TOOL POS"
MG{P2}"9) EXIT"
JS#IN
JS#CLEAR
IF(INPUT=1)
INPUT="*"
JS#CLEAR
MG{P2}"MOVING TO TOOL"
MG{P2}"MAKE SURE ALL IS CLEAR"
MG{P2}
MG{P2}
MG{P2}
WT3000
SPJOGSPEED/10,JOGSPEED/10,JOGSPEED/10
PATOOLX,TOOLY,TOOLZ
JS#CLEAR
MG{P2}"MOVING TO TOOL POS"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MOTION=1
BGXYZ
AM
MOTION=0
JS#CLEAR
MG{P2}"MOVING TO TOOL"
MG{P2}"COMPLETED"
MG{P2}"TOOL X ",TOOLX
MG{P2}"TOOL Y ",TOOLY
MG{P2}"TOOL Z ",TOOLZ
WT3000
ENDIF
IF(INPUT=2)
JS#CLEAR
MG{P2}"TEACH NEW POSITION"
MG{P2}"JOG TO POSITION"
MG{P2}"PRESS SAVE MOVE ON"
MG{P2}"PENDANT"
MG{P2}
MG{P2}
#LOOP4
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVDPRG,CMD="I"
IF(CMD <>"I")
JP#LOOP4
ENDIF
JS#CLEAR
MG{P2}"TOOL POSITION SAVED"
MG{P2}"TOOL X ",TOOLX
MG{P2}"TOOL Y ",TOOLY
MG{P2}"TOOL Z ",TOOLZ
MG{P2}
MG{P2}
WT3000
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING TOOL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING TOOL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
IF(CMD =9)
JS#CLEAR
MG{P2}"EXITING TOOL"
MG{P2}"SETUP"
MG{P2}"RETURNING TO"
MG{P2}"PREVIOUS MENU"
MG{P2}
WT2000
ENDIF
JS#SETUP
ENDIF
IF(INPUT=4)
JS#HOME
JP#SETUP
ENDIF
IF(INPUT=9)
INPUT="*"
JS#CLEAR
MG{P2}"EXITING"
MG{P2}"SETUP"
MG{P2}
MG{P2}
MG{P2}
WT2000
ENDIF
ENDIF
EN
#RECSVLD
JS#CLEAR
MG{P2}"SETUP MENU"
MG{P2}"1) SAVE RECIPE TO HMI"
MG{P2}"2) LOAD RECIPE FROM HMI"
MG{P2}"9) EXIT"
MG{P2}
WT2000
CMD ="*"
EN
#TCHOFFS
CMD="*"
JS#CLEAR
MG{P2}"JOG TO PRIMARY POSITION"
MG{P2}"SAVE THAT POSITION"
MG{P2}"MOVE ALL THREE (3) AXIS"
MG{P2}"TO OFFSET POSITION"
MG{P2}"SAVE POSITION AGAIN"
MG{P2}"AXIS OFFSETS WILL BE"
MG{P2}"CALCULATED"
#TCHOFST
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVFFS1,CMD ="I"
JS#ESCTCHF,CMD ="Z"
JP#TCHOFST
EN
#SAVFFS1
WT100
OFFX1=(_TPX/SCALE)
OFFY1=(_TPY/SCALE)
OFFZ1=(_TPZ/SCALE)
JS#CLEAR
MG{P2}"FIRST POSITION SAVED"
MG{P2}"JOG ALL AXIS TO THE"
MG{P2}"OFFSET POSITION AND"
MG{P2}"SAVE MOVE"
MG{P2}
MG{P2}
#TCHOFS3
CMD="*"
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVFFS2,CMD ="I"
JS#ESCTCHF,CMD ="Z"
JP#TCHOFS3
EN
#SAVFFS2
WT100
OFFX2=(_TPX/SCALE)
OFFY2=(_TPY/SCALE)
OFFZ2=(_TPZ/SCALE)
OFFX=OFFX2-OFFX1
OFFY=OFFY2-OFFY1
OFFZ=OFFZ2-OFFZ1
JS#CLEAR
MG{P2}"OFFSET"
MG{P2}"CALCULATION"
MG{P2}"COMPLETE"
MG{P2}
MG{P2}
WT1000
JP#TEACH
EN
#ESCTCHF
JS#CLEAR
MG{P2}"ESCAPING"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
JP#TEACH
EN
#TEACH
JS#CLEAR
MG{P2}"TEACH MENU - ESC EXIT"
MG{P2}"INC(Q) TIMER(S) SPEED(T)"
MG{P2}"AXIS OFFSETS (C)"
MG{P2}"   PROGRAMS-TEACH-(A)"
MG{P2}
WT1000
CMD ="*"
#TEACHMN
JS#WAITD
IF(CMD ="C")
JS#TCHOFFS
ENDIF
IF(CMD ="Q")
JS#INC
ENDIF
IF(CMD ="S")
JS#TIMER
ENDIF
IF(CMD ="T")
JS#SPEEDST
ENDIF
IF(CMD ="A")
PT=0
SEQ=1
JS#PROGMNU
ENDIF
JP#TEACH,CMD <>"Z"
JS#CLEAR
MG{P2}"RETURNING TO SETUP"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
EN
#MANUAL
JS#CLEAR
MG{P2}"MANUAL MENU"
MG{P2}"1) JOG AXIS"
MG{P2}"2) ACTIVATE OUTPUTS"
MG{P2}"3) PURGE SYSTEM"
MG{P2}"4) TOOL POSITION"
MG{P2}"9) EXIT"
WT1000
CMD ="*"
INPUT="*"
JS#IN
IF(INPUT=1)
#LOOP5
CMD ="*"
JS#CLEAR
MG{P2}"JOGGING AXIS"
MG{P2}"PRESS ESC TO EXIT"
MG{P2}_TPX/SCALE
MG{P2}_TPY/SCALE
MG{P2}_TPZ/SCALE
MG{P2}
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
IFCMD <>"Z"
JP#LOOP5
ENDIF
JS#MANUAL
ENDIF
#OUTLP
IF(INPUT=2)
#OUTCH
CMD="*"
JS#CLEAR
MG{P2}"OUTPUTS - ESC to QUIT"
MG{P2}"ARROW LEFT/RIGHT ON/OFF"
MG{P2}"ARROW UP/DOWN SELECT"
MG{P2}
MG{P2}"OUTPUT",OUTNUM
MG{P2}"STATUS",OUTSTA[OUTNUM]
JS#WAITD
IF(CMD="D")
OUTNUM=OUTNUM+1
IF(OUTNUM<0)
OUTNUM=0
ENDIF
IF(OUTNUM>6)
OUTNUM=6
ENDIF
ENDIF
IF(CMD="N")
OUTNUM=OUTNUM-1
IF(OUTNUM<0)
OUTNUM=0
ENDIF
IF(OUTNUM>6)
OUTNUM=6
ENDIF
ENDIF
IF(CMD="J")
OUTSTA[OUTNUM]=1
OBOUTNUM,OUTSTA[OUTNUM]
ENDIF
IF(CMD="H")
OUTSTA[OUTNUM]=0
OBOUTNUM,OUTSTA[OUTNUM]
ENDIF
IF(CMD="Z")
JS#CLEAR
MG{P2}"ALL OUTPUTS DEACTIVATED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
ENDIF
JP#OUTCH,CMD<>"Z"
JP#MANUAL,CMD "Z"
ENDIF
IF(INPUT=9)
JS#CLEAR
MG{P2}"EXITING"
MG{P2}
WT1000
ENDIF
ENDIF
IF(INPUT=3)
#LOOP6
CMD ="*"
JS#CLEAR
MG{P2}"PURGE SYSTEM"
MG{P2}"RUN TO START"
MG{P2}"PRESS ESC TO EXIT"
MG{P2}
MG{P2}
MG{P2}
JS#WAITD
JS#PURGESY,CMD ="P"
IFCMD <>"Z"
JP#LOOP6
ENDIF
JS#MANUAL
ENDIF
IF(INPUT=9)
JS#CLEAR
MG{P2}"EXITING"
MG{P2}
WT1000
ENDIF
IF(INPUT=4)
#LOOP8
CMD ="*"
JS#CLEAR
MG{P2}"MOVE TO TOOL POS"
MG{P2}"RUN TO START"
MG{P2}"PRESS ESC TO EXIT"
MG{P2}
MG{P2}
MG{P2}
JS#WAITD
JS#MVTOOL,CMD ="P"
IFCMD <>"Z"
JP#LOOP8
ENDIF
JS#MANUAL
ENDIF
IF(INPUT=9)
JS#CLEAR
MG{P2}"EXITING"
MG{P2}
WT1000
ENDIF
ENDIF
EN
#MVTOOL
MOTION=1
SPSYSSPEED,SYSSPEED,SYSSPEED
PATOOLX,TOOLY,0
JS#CLEAR
MG{P2}"MOVING TO TOOL"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
BGZ
AM
PATOOLX,TOOLY,TOOLZ
BGXY
AM
BGZ
AM
PA,,TOOLZ
AM
MOTION=0
JS#CLEAR
MG{P2}"TOOL MOVE COMPLETED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
EN
#TIMER
JS#CLEAR
MG{P2}"SET PURGE TIME"
MG{P2}
MG{P2}"CURRENT PURGE TIME IS"
MG{P2}PURGTIME,"  SECONDS"
MG{P2}
MG{P2}
JS#IN
PURGTIME=INPUT
JS#CLEAR
MG{P2}"NEW PURGE TIME IS "
MG{P2}PURGTIME,"  SECONDS"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT2000
EN
#HOME
SH
JS#CLEAR
MG{P2}"UNIT IS HOMING TO START POSITION"
NSHOME=0
MG{P2}"PLEASE WAIT"
MOTION=1
SP4000,4000,4000
FE
MOTION=1
BGZ
AM
BGXY
AM
SP4000,4000,4000
PRINC,INC,INC
DP0,0,0
MOTION=0
NSHOME=1
JS#CLEAR
MG{P2}"THANK YOU"
MG{P2}"HOMING COMPLETE"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
MOTION=0
CMD ="*"
NSHOME=1
EN
User
#SAVEPNT
JS#CLEAR
MG{P2}"SAVING POSITION"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
EN
#SPEEDST
JS#CLEAR
MG{P2}"SET NEW SPEED"
MG{P2}"ENTER NEW SPEED"
MG{P2}"CURRENT SPEED",SPEEDF*100," %"
MG{P2}"ENTER NEW SPEED"
MG{P2}
MG{P2}
JS#IN
SPEEDF=INPUT
IF(SPEEDF>100)
SPEEDF=100
ENDIF
SYSSPEED =SPEEDF*MAXSPEED
JS#CLEAR
MG{P2}"NEW SPEED",SPEEDF," %"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT2000
EN
#PURGESY
JS#CLEAR
MG{P2}"PURGING SYSTEM NOW"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MOTION=1
SPSYSSPEED,SYSSPEED,SYSSPEED
PAPURGEX,PURGEY,0
BGZ
AM
BGXY
AM
PA,,PURGEZ
BGZ
AM
OB1,1
WTPURGTIME
OB1,0
PADWELLX,DWELLY,0
BGZ
AM
BGXY
AM
MOTION=0
MG{P2}"PURGE COMPLETE"
WT1000
EN
#PROGMNU
JS#CLEAR
MG{P2}" PROGRAM MENU"
MG{P2}" 1) TEACH NEW PROGRAM"
MG{P2}
MG{P2}" "
MG{P2}" "
MG{P2}" 9)EXIT"
JS#IN
IF(INPUT=1)
JS#NEWPTS
ENDIF
IF(INPUT=9)
JS#CLEAR
MG{P2}" EXITING"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
ENDIF
EN
#NEWPTS
JS#CLEAR
PTS_ADD=0
MG{P2}"TEACHING SEQ # ",SEQ
MG{P2}"TEACHING POS# ",PT
MG{P2}"CONTINUE"
MG{P2}"1)  YES"
MG{P2}"2)  NO"
MG{P2}
JS#IN
IF(INPUT=2)
JS#CLEAR
MG{P2}"POINT EDIT EXIT "
MG{P2}"SAVING PROGRAM"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
LASTSEQ=SEQ
PTSAV=PT
SEQSAV=SEQ
WT1000
ENDIF
IF(INPUT=1)
JS#CLEAR
MG{P2}"DETERMINE POSITION TYPE"
MG{P2}"1) STOP POSITION"
MG{P2}"2) CONTINOUS POSITION"
MG{P2}
MG{P2}
MG{P2}
JS#IN
IF(INPUT=1)
MODET[PT]=1
IF(MODET[PT-1]=1)
IF(MODET[PT]=1)
SEQ=SEQ+1
ENDIF
ENDIF
ENDIF
IF(INPUT=2)
MODET[PT]=2
IF(MODET[PT-1])&(MODET[PT])
SEQNM[PT]=SEQNM[PT-1]+1
ENDIF
ENDIF
JS#CLEAR
MG{P2}"JOG AXIS TO POSITION"
MG{P2}" SAVE MOVE (I) TO SAVE"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
CMD="*"
#JOGPT
JS#WAITD
JS#JOGXPL,CMD ="J"
JS#JOGXMN,CMD ="H"
JS#JOGYPL,CMD ="D"
JS#JOGYMN,CMD ="N"
JS#JOGZPL,CMD ="O"
JS#JOGZMN,CMD ="E"
JS#SAVEPRG,CMD="I"
IF(CMD ="I")
JP#SAVEPT
ENDIF
JP#JOGPT
ENDIF
EN
#SAVEPT
PTX[PT]=_TPX/SCALE
PTY[PT]=_TPY/SCALE
PTZ[PT]=_TPZ/SCALE
SEQNM[PT]=SEQ
LASTSEQ=SEQ
PINDEX=PT
JS#TEACHPT
PT=PT+1
PTS_ADD =PTS_ADD+1
JP#NEWPTS
EN
#RUN
RUNPTS=
RUNSEQ=LASTSEQ
EN
#TEACHPT
OPT=1
#TCHPTS
JS#CLEAR
#TCHOUTL
MG{P2}"DO YOU WANT TO ACTIVATE"
MG{P2}"OUTPUT #",OPT
MG{P2}"ARROW KEYS TO NAVIGATE"
MG{P2}
MG{P2}"1)  YES"
MG{P2}"2)  NO"
JS#IN
IF(INPUT=2)
JS#CLEAR
MG{P2}"OUTPUT ",OPT," IS OFF"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
OUTD[OPT]=0
WT1000
ENDIF
IF(INPUT=1)
OUTD[OPT]=1
JS#CLEAR
MG{P2}"OUTPUT ",OPT," IS ON"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
OUTD[OPT]=1
WT1000
ENDIF
OPT=OPT+1
IF(OPT<7)
JP#TCHPTS
ENDIF
#ENDOTCH
JS#CLEAR
MG{P2}"NO MORE OUTPUTS TO"
MG{P2}"TEACH THIS POSITION"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
JS#CODEOUT
EN
#CODEOUT
OUT[PT]=OUTD[1]+(OUTD[2]*10)+(OUTD[3]*100)+(OUTD[4]*1000)+(OUTD[5]*10000)
OUT[PT]=OUT[PT]+(OUTD[6]*100000)+(OUTD[7]*1000000)
EN
#INC
JS#CLEAR
MG{P2}"SET INC AMOUNT"
MG{P2}"ENTER NEW INC",INC
MG{P2}
MG{P2}
MG{P2}
MG{P2}
JS#IN
INC=INPUT
JS#CLEAR
MG{P2}"NEW INC AMOUNT",INC
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT2000
EN
#EDTSEQ
JS#CLEAR
MG{P2}"EDIT PROGRAM / SEQ"
MG{P2}"1) EDIT SEQUENCE POINTS"
MG{P2}"2) DELETE SEQUENCE"
MG{P2}"3) INSERT SEQUENCE"
MG{P2}"4) RUN STOP MODE"
MG{P2}"9) EXIT"
JS#IN
IF(INPUT=2)
JS#CLEAR
MG{P2}"SEQUENCE DELETE"
MG{P2}LASTSEQ," SEQUENCES"
MG{P2}"SELECT SEQUENCE"
MG{P2}" FOR DELETION"
MG{P2}
MG{P2}
WT1000
JS#IN
DELSEQ=INPUT
IF(DELSEQ>LASTSEQ)
JS#CLEAR
MG{P2}"SEQUENCE OUT"
MG{P2}"RANGE"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
JP#EDTSEQ
ENDIF
JS#CLEAR
MG{P2}"DELETING SEQUENCE",DELSEQ
MG{P2}
MG{P2}"PLEASE WAIT"
MG{P2}
MG{P2}
MG{P2}
WT1000
JS#DELSEQ
MG{P2}"SEQUENCE DELETED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
ENDIF
IF(INPUT=4)
STPTM=1000
MODE=1
JS#RUNMODE
STPTM=0
MODE=2
ENDIF
IF(INPUT=9)
JS#CLEAR
MG{P2}"EXITING"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
JP#MENU
ENDIF
IF(INPUT=3)
JS#CLEAR
MG{P2}"INSERT A SEQUENCE"
MG{P2}"INSERT SEQUENCE IN"
MG{P2}"FRONT OF SEQUENCE #"
MG{P2}
MG{P2}
MG{P2}
WT1000
JS#IN
NSEQ=INPUT+1
SEQ=NSEQ
JS#CLEAR
MG{P2}"INSERTING SEQUENCE"
MG{P2}"SEQUENCE # ",SEQ
MG{P2}
MG{P2}
MG{P2}"BEGIN EDITING NEW"
MG{P2}"SEQUENCE"
WT500
JP#SEQSAV
JP#NEWPTS
ENDIF
IF(INPUT=1)
JS#CLEAR
MG{P2}"EDIT SEQUENCE"
MG{P2}"1) INSERT POSITION"
MG{P2}"2) DELETE POSITION"
MG{P2}"SEQUENCES, ",LASTSEQ
MG{P2}"POSITIONS ",PT
MG{P2}
JS#IN
IF(INPUT=1)
JS#CLEAR
MG{P2}"INSERTING POSITION"
MG{P2}
MG{P2}"SEQUENCES AVAILABLE "
MG{P2}LASTSEQ
MG{P2}"SELECT A SEQUENCE"
MG{P2}"TO INSERT A POSITION"
MG{P2}"INTO PLEASE"
JS#IN
INSRTSEQ=INPUT
JS#FNDSEQ
#ISRTRTN
IINDEX=0
MOVSEQ=INSRTSEQ
SVNSTSEQ=INSRTSEQ
RMVINDEX=0
JS#FNDSEQ
JS#CLEAR
MG{P2}"THERE ARE  ",SEQPOS
MG{P2}"POSITIONS IN THE"
MG{P2}"REQUESTED SEQUENCE"
MG{P2}"SELECT A POSITION"
MG{P2}"TO INSERT"
MG{P2}
WT1000
JS#IN
CHPOS=INPUT
WT100
MG{P2}"INSERTING POSITION "
MG{P2}CHPOS
MG{P2}"POSITION ",PT
MG{P2}"SEQUENCE ",SEQ
MG{P2}
MG{P2}
INSRTPOS=CHPOS+SEQFRS
IF(INSRTPOS>SEQFRS1)
JP#CLEAR
MG{P2}"INCORRECT POSITION"
MG{P2};MG{P2};MG{P2}
MG{P2};MG{P2}
JP#ISRTRTN
ENDIF
MVINDX=0
MVINDX2=INSRTPOS
#LOOPMV
IF(MVINDX2<PTSIZE)
SEQX[MVINDX]=TPX[MVINDX2]
SEQY[MVINDX]=TPY[MVINDX2]
SEQZ[MVINDX]=TPZ[MVINDX2]
SEQMODET[MVINDX]=MODET[MVINDX2]
SEQNUM[MVINDX]=SEQNM[MVINDX2]
MVINDX=MVINDX+1
MVINDX2=MVINDX2+1
JP#LOOPMV
ENDIF
PT_SAVED =PT
PTADJ=PT-INSRTPOS
PT=INSRTPOS
SEQ=INSRTSEQ
JS#NEWPTS
PTSAVED=PT
SEQ=LASTSEQ
MVBINDX=0
RTNIDX=PT
#RTNLP
IF(RTNIDX<PTSIZE)
PTX[RTNIDX]=SEQX[MVBINDX]
PTY[RTNIDX]=SEQY[MVBINDX]
PTZ[RTNIDX]=SEQZ[MVBINDX]
MODET[RTNIDX]=SEQMODET[MVBINDX]
SEQNM[RTNIDX]=SEQNM[MVBINDX]
RTNIDX=RTNIDX+1
MVBINDX=MVBINDX+1
JP#RTNLP
ENDIF
PT=PT+PTADJ
ENDIF
JS#CLEAR
IF(INPUT=2)
INPUT="*"
MG{P2}"DELETING POSITION"
MG{P2}
MG{P2}"SEQUENCES AVAILABLE "
MG{P2}LASTSEQ
MG{P2}"SELECT A SEQUENCE"
MG{P2}"TO DELETE A POSITION"
MG{P2}"FROM"
JS#IN
DELSEQ=INPUT
JS#FNDSEQ
IINDEX=0
MOVSEQ=INSRTSEQ
SVNSTSEQ=INSRTSEQ
RMVINDEX=0
PTSAVED =PT
JS#FNDSEQ
JS#CLEAR
MG{P2}"THERE ARE  ",SEQPOS
MG{P2}"POSITIONS IN THE"
MG{P2}"REQUESTED SEQUENCE"
MG{P2}"SELECT A POSITION"
MG{P2}"TO DELETE"
MG{P2}
WT1000
JS#IN
DELPOS=INPUT
WT100
MG{P2}"DELETING POSITION "
MG{P2}DELPOS
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
SEQ=DELSEQ
PTDEL=DELPOS
DELNDX=SEQPOS+DELPOS+1
DELNDX2=SEQPOS+DELPOS
MVINDEX=0
#DELPSLP
IF(DELNDX<PTSIZE)
SEQX[MVINDEX]=TPX[DELNDX]
SEQY[MVINDEX]=TPY[DELNDX]
SEQZ[MVINDEX]=TPZ[DELNDX]
SEQNUM[MVINDEX]=SEQNM[DELNDX]
SEQMODET[MVINDEX]=MODET[DELNDX]
MVINDEX=MVINDEX+1
DELNDX=DELNDX+1
JP#DELPSLP
ENDIF
MVINDEX=0
#MVBKDPS
IF(DELNDX2<PTSIZE)
PTX[DELNDX2]=SEQX[MVINDEX]
PTY[DELNDX2]=SEQY[MVINDEX]
PTZ[DELNDX2]=SEQZ[MVINDEX]
SEQNM[DELNDX2]=SEQNUM[MVINDEX]
MODET[DELNDX2]=SEQMODET[MVINDEX]
MVINDEX=MVINDEX+1
DELNDX2=DELNDX2+1
JP#MVBKDPS
ENDIF
PT=PTSAVED-1
JS#CLEAR
MG{P2}"POSITION DELETED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
ENDIF
ENDIF
JP#EDTSEQ
ENDIF
#NEWSQCR
EN
#FNDSEQ
FINDSEQ=INSRTSEQ
FINDSEQ1=INSRTSEQ+1
FSINDEX=0
PSCTR=0
FLAG1=0
FLAG2=0
#FNDLP
IF(SEQNM[FSINDEX]=FINDSEQ)
IF(FLAG1=0)
SEQFRS=FSINDEX
FLAG1=1
ENDIF
ENDIF
IF(SEQNM[FSINDEX]=FINDSEQ1)
IF(FLAG2=0)
SEQFRS1=FSINDEX-1
FLAG2=1
ENDIF
ENDIF
FSINDEX=FSINDEX+1
IFFSINDEX<PTSIZE
JP#FNDLP
ENDIF
SEQPOS=SEQFRS1-SEQFRS
EN
#DELSEQ
DELSQPT=0
DELSQSTR=0
DELSQSTP=0
DFLG1=0
DFLG2=0
#DELSEQ1
IF(DELSQPT<=PINDEX)
IF((SEQNM[DELSQPT]=DELSEQ)
IF(DFLG1=0)
DELSQSTR=DELSQPT
DFLG1=1
DELSTRT=DELSQPT
ENDIF
IF(DELSQPT>DELSQSTR)
DELSQSTP=DELSQPT
DELSSTOP=DELSQPT
ENDIF
ENDIF
ENDIF
DELSQPT=DELSQPT+1
IF(DELSQPT<21)
JP#DELSEQ1
ENDIF
SEQ=SEQ-1
LASTSEQ=LASTSEQ-1
PTCALC=DELSQSTP-DELSQSTR
DELSQSTP=DELSQSTP+1
PT=PT-PTCALC
#SQDELLP
IF(DELSQSTP<PTSIZE)
PTX[DELSQSTR]=PTX[DELSQSTP]
PTY[DELSQSTR]=PTY[DELSQSTP]
PTZ[DELSQSTR]=PTZ[DELSQSTP]
MODET[DELSQSTR]=MODET[DELSQSTP]
SEQNM[DELSQSTR]=SEQNM[DELSQSTP]-1
IF(SEQNM[DELSQSTR]<0)
SEQNM[DELSQSTR]=0
ENDIF
DELSQSTR=DELSQSTR+1
DELSQSTP=DELSQSTP+1
JP#SQDELLP
ENDIF
EN
#SEQSAV
SSINDEX=0
SFLA1=0
#SEQSVL1
IF(SFLA1=0)
IF(SEQNM[SSINDEX]=NSEQ)
MSEQSTR=SSINDEX
SFLA1=1
ENDIF
ENDIF
SSINDEX=SSINDEX+1
IF(SSINDEX<300)
JP#SEQSVL1
ENDIF
#DMVDATA
MINDEX=0
PT=MSEQSTR
LASTSEQ=LASTSEQ+1
TINDEX=0
TTINDEX=0
#DMLOOP1
IF(MSEQSTR<PTSIZE)
SEQX[MINDEX]=PTX[MSEQSTR]
SEQY[MINDEX]=PTY[MSEQSTR]
SEQZ[MINDEX]=PTZ[MSEQSTR]
SEQMODET[MINDEX]=MODET[MSEQSTR]
SEQNUM[MINDEX]=SEQNM[MSEQSTR]+1
MINDEX=MINDEX+1
MSEQSTR=MSEQSTR+1
JP#DMLOOP1
ENDIF
SEQCHECK =SEQNUM[1]
SEQINDEX=0
#TSTLOP1
IF(SEQINDEX<PTSIZE)
IF(SEQNM[SEQINDEX]<SEQCHECK)
SEQNM[SEQINDEX]=0
ENDIF
SEQINDEX=SEQINDEX+1
JP#TSTLOP1
ENDIF
JS#NEWPTS
MVINDEX=PT
MVINDEX2=0
#RESVLOP
IF(SEQX[MVINDEX2]>0)
PTX[MVINDEX]=SEQX[MVINDEX2]
PTY[MVINDEX]=SEQY[MVINDEX2]
PTZ[MVINDEX]=SEQZ[MVINDEX2]
SEQNM[MVINDEX]=SEQNUM[MVINDEX2]
MODET[MVINDEX]=SEQMODET[MVINDEX2]
MVINDEX=MVINDEX+1
MVINDEX2=MVINDEX2+1
JP#RESVLOP
ENDIF
#TLOOP2
IF(SEQX[TINDEX]<>0
TTINDEX=TTINDEX+1
TINDEX=TINDEX+1
JP#TLOOP2
ENDIF
PT=PT+TTINDEX
EN
#SAVEPRG
PURGEX=_TPX
PURGEY=_TPY
PURGEZ=_TPZ
EN
#SAVDPRG
DWELLX=_TPX
DWELLY=_TPY
DWELLZ=_TPZ
EN
#SAVTPRG
TOOLX=_TPX/SCALE
TOOLY=_TPY/SCALE
TOOLZ=_TPZ/SCALE
EN
#WAITD
JP#WAITD,CMD="*"
EN
#CLEAR
COUNT=0
#CLEARL
COUNT=COUNT+1
MG{P2}
JP#CLEARL,COUNT<8
WT50
EN
#PLOUT
OUTD[0]=(@INT[((@FRAC[(OUT[PTRUN]/10)]*10.01))])
OUTD[1]=(@INT[((@FRAC[(OUT[PTRUN]/100)]*10.01))])
OUTD[2]=(@INT[((@FRAC[(OUT[PTRUN]/1000)]*10.01))])
OUTD[3]=(@INT[((@FRAC[(OUT[PTRUN]/10000)]*10.01))])
OUTD[4]=(@INT[((@FRAC[(OUT[PTRUN]/100000)]*10.01))])
OUTD[5]=(@INT[((@FRAC[(OUT[PTRUN]/1000000)]*10.01))])
OUTD[6]=(@INT[((@FRAC[(OUT[PTRUN]/10000000)]*10.01))])
EN
#IN
CI 1
WT100
WT100
INPUT="*"
#INLOOP
JP#INLOOP,INPUT="*"
#NOTEXT
WT100;CI 2
EN
#READHMI
JS#ReadRec
JS#OUTIN
JS#PTXIN
JS#PTYIN
JS#PTZIN
JS#SEQNMIN
JS#MODETIN
MG{P2}"Reading Recipe from HMI..."
SCALE=Recipe[R_Index]
R_Index=R_Index+1
DWELLX=Recipe[R_Index]
R_Index=R_Index+1
DWELLY=Recipe[R_Index]
R_Index=R_Index+1
DWELLZ=Recipe[R_Index]
R_Index=R_Index+1
PURGEX=Recipe[R_Index]
R_Index=R_Index+1
PURGEY=Recipe[R_Index]
R_Index=R_Index+1
PURGEZ=Recipe[R_Index]
R_Index=R_Index+1
TOOLX=Recipe[R_Index]
R_Index=R_Index+1
TOOLY=Recipe[R_Index]
R_Index=R_Index+1
TOOLZ=Recipe[R_Index]
R_Index=R_Index+1
SYSSPEED =Recipe[R_Index]
R_Index=R_Index+1
INC=Recipe[R_Index]
R_Index=R_Index+1
PURGTIME=Recipe[R_Index]
R_Index=R_Index+1
PURGE=Recipe[R_Index]
R_Index=R_Index+1
MAXSPEED =Recipe[R_Index]
R_Index=R_Index+1
LASTSEQ=Recipe[R_Index]
R_Index=R_Index+1
JOGACC =Recipe[R_Index]
R_Index=R_Index+1
MAXJOG=Recipe[R_Index]
R_Index=R_Index+1
PTSIZE=Recipe[R_Index]
R_Index=R_Index+1
UNIT=Recipe[R_Index]
R_Index=R_Index+1
JS#CLEAR
MG{P2}"Completing Recipe Write"
WT1000
CMD ="*"
JP#MENU
EN
#ReadRec
A_Index=0
W_Index=0
#ReadLP1
MG{P2}"Completing Recipe Read"
WT100
MBH=,3,W_Index,2,A[]
floatA=(A[1]*$10000)
float=floatA+A[0]
real=@REAL[float]
Recipe[A_Index]=real
A_Index=A_Index+1
W_Index=W_Index+2
MG{P2}A_Index
JP#ReadLP1,A_Index<650
R_Index=0
A_Index=0
EN
#OUTIN
MG{P2}"Copying Data to OUT"
MG{P2}OUT[A_Index]
OUT[A_Index]=Recipe[R_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#OUTIN,A_Index<PTHMISZE
A_Index=0
EN
#PTXIN
MG{P2}"Copying Data to PTX"
MG{P2}PTX[A_Index]
MG{P2}Recipe[R_Index]
PTX[A_Index]=Recipe[R_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTXIN,A_Index<PTHMISZE
A_Index=0
EN
#PTYIN
MG{P2}"Copying Data to PTY"
MG{P2}PTY[A_Index]
MG{P2}Recipe[R_Index]
PTY[A_Index]=Recipe[R_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTYIN,A_Index<PTHMISZE
A_Index=0
EN
#PTZIN
MG{P2}"Copying Data to PTZ"
MG{P2}PTZ[A_Index]
MG{P2}Recipe[R_Index]
PTZ[A_Index]=Recipe[R_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTZIN,A_Index<PTHMISZE
A_Index=0
EN
#SEQNMIN
MG{P2}"Copying Data to SEQNM"
MG{P2}SEQNM[A_Index]
MG{P2}Recipe[R_Index]
SEQNM[A_Index]=Recipe[R_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#SEQNMIN,A_Index<PTHMISZE
A_Index=0
PTFLAG=0
EN
#MODETIN
MG{P2}"Copying Data to MODET"
MG{P2}MODET[A_Index]
MG{P2}Recipe[R_Index]
MODET[A_Index]=Recipe[R_Index]
IF(MODET[A_Index]=0)
IF(PTFLAG=0)
PTFLAG=1
PT=A_Index
ENDIF
ENDIF
A_Index=A_Index+1
R_Index=R_Index+1
JP#MODETIN,A_Index<PTHMISZE
A_Index=0
EN
#WRTHMI
A_Index=0
W_Index=0
R_Index=0
JS#OUTOUT
JS#PTXOUT
JS#PTYOUT
JS#PTZOUT
JS#SEQMOUT
JS#MODTOUT
Recipe[R_Index]=SCALE
R_Index=R_Index+1
Recipe[R_Index]=DWELLX
R_Index=R_Index+1
Recipe[R_Index]=DWELLY
R_Index=R_Index+1
Recipe[R_Index]=DWELLZ
R_Index=R_Index+1
Recipe[R_Index]=PURGEX
R_Index=R_Index+1
Recipe[R_Index]=PURGEY
R_Index=R_Index+1
Recipe[R_Index]=PURGEZ
R_Index=R_Index+1
Recipe[R_Index]=TOOLX
R_Index=R_Index+1
Recipe[R_Index]=TOOLY
R_Index=R_Index+1
Recipe[R_Index]=TOOLZ
R_Index=R_Index+1
Recipe[R_Index]=SYSSPEED
R_Index=R_Index+1
Recipe[R_Index]=INC
R_Index=R_Index+1
Recipe[R_Index]=PURGTIME
R_Index=R_Index+1
Recipe[R_Index]=PURGE
R_Index=R_Index+1
Recipe[R_Index]=MAXSPEED
R_Index=R_Index+1
Recipe[R_Index]=LASTSEQ
R_Index=R_Index+1
Recipe[R_Index]=JOGACC
R_Index=R_Index+1
Recipe[R_Index]=MAXJOG
R_Index=R_Index+1
Recipe[R_Index]=PTSIZE
R_Index=R_Index+1
Recipe[R_Index]=UNIT
R_Index=R_Index+1
JS#LDRECDA
CMD ="*"
EN
A_Index=0
R_Index=0
#OUTOUT
MG{P2}"Copying Data from OUT"
WT10
MG{P2}OUT[A_Index]
MG{P2}A_Index
MG{P2}R_Index
MG{P2}Recipe[A_Index]
Recipe[R_Index]=OUT[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#OUTOUT,A_Index<PTHMISZE
A_Index=0
EN
#PTXOUT
MG{P2}"Copying Data from PTX"
MG{P2}PTX[A_Index]
MG{P2}Recipe[R_Index]
Recipe[R_Index]=PTX[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTXOUT,A_Index<PTHMISZE
A_Index=0
EN
#PTYOUT
MG{P2}"Copying Data to PTY"
MG{P2}PTY[A_Index]
MG{P2}Recipe[R_Index]
Recipe[R_Index]=PTY[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTYOUT,A_Index<PTHMISZE
A_Index=0
EN
#PTZOUT
MG{P2}"Copying Data to PTZ"
MG{P2}PTZ[A_Index]
MG{P2}Recipe[R_Index]
Recipe[R_Index]=PTZ[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#PTZOUT,A_Index<PTHMISZE
A_Index=0
EN
#SEQMOUT
MG{P2}"Copying Data to SEQNM"
MG{P2}SEQNM[A_Index]
MG{P2}Recipe[R_Index]
Recipe[R_Index]=SEQNM[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#SEQMOUT,A_Index<PTHMISZE
A_Index=0
EN
#MODTOUT
MG{P2}"Copying Data from MODETT"
MG{P2}MODET[A_Index]
MG{P2}Recipe[R_Index]
Recipe[R_Index]=MODET[A_Index]
A_Index=A_Index+1
R_Index=R_Index+1
JP#MODTOUT,A_Index<PTHMISZE
A_Index=0
EN
#LDRECDA
JS#MBINIT
Count=1
#LOOPS
#LPOO
A_Index=0
W_Index=0
#LOOPLD
WT10
Rvar=Recipe[A_Index]
MG{P2}Rvar
MG{P2}A_Index
Fvar=@FLOT[Rvar]
hbyte=Fvar&$FFFF0000/$FFFF
lbyte=Fvar&$FFFF
array[1]=hbyte
array[0]=lbyte
MBH=,16,W_Index,2,array[0]
A_Index=A_Index+1
W_Index=W_Index+2
MG{P2}A_Index
MG{P2}W_Index
MG{P2}Recipe[A_Index]
JP#LOOPLD,A_Index<650
MG{P2}"Data Write Completed"
EN
#RUNMODE
WT2000
XQ#MOTNIO,1
PTRUN=0
JS#CLEAR
MG{P2}"MOVING TO DWELL"
MG{P2}
MG{P2}" "
MG{P2}
MG{P2}
MG{P2}
SH
SPSYSSPEED,SYSSPEED,SYSSPEED
PADWELLX,DWELLY,100
BGXYZ
AM
PA,,DWELLZ
BGZ
AM
MG{P2}"RUNNING"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
WT1000
#RUNLOOP
PTRUNNER=PTRUN+1
PTTEST=PTRUN-1
IF(PTRUN<=PT)
IF(MODET[PTRUN]=1)
JS#PTOUT
CURRENTX=((PTX[PTRUN]*SCALE)+OFFX)
CURRENTY=((PTY[PTRUN]*SCALE)+OFFY)
CURRENTZ=((PTZ[PTRUN]*SCALE)+OFFZ)
SPSYSSPEED,SYSSPEED,SYSSPEED
PACURRENTX,CURRENTY,CURRENTZ
BGXYZ
AM
TMODE=1
ENDIF
IF(MODET[PTRUN]=2)
IF(MODET[PTTEST]=1)
LMXYZ
ENDIF
CURRENTX=(((PTX[PTRUN]-PTX[PTTEST])*SCALE)+OFFX)
CURRENTY=(((PTY[PTRUN]-PTY[PTTEST])*SCALE)+OFFY)
CURRENTZ=(((PTZ[PTRUN]-PTZ[PTTEST])*SCALE)+OFFZ)
VS(((MAXSPEED/4)*SPEEDF)
LICURRENTX,CURRENTY,CURRENTZ
IF(MODET[PTRUNNER]=1)
RUN2=1
MOTION=1
FTESET=1
LE
BGS
AM
ENDIF
MOTION=0
ENDIF
ENDIF
PTRUN=PTRUN+1
IF(PTRUN<=PT)
JP#RUNLOOP
ENDIF
WT3000
ENDIF
EN


JS#MENU
#PTOUT
OUTD[1]=(@INT[((@FRAC[(OUT[PTRUN]/10)]*10.01))])
OUTD[2]=(@INT[((@FRAC[(OUT[PTRUN]/100)]*10.01))])
OUTD[3]=(@INT[((@FRAC[(OUT[PTRUN]/1000)]*10.01))])
OUTD[4]=(@INT[((@FRAC[(OUT[PTRUN]/10000)]*10.01))])
OUTD[5]=(@INT[((@FRAC[(OUT[PTRUN]/100000)]*10.01))])
OUTD[6]=(@INT[((@FRAC[(OUT[PTRUN]/1000000)]*10.01))])
OUTD[7]=(@INT[((@FRAC[(OUT[PTRUN]/10000000)]*10.01))])
OB1,OUTD[1]
OB2,OUTD[2]
OB3,OUTD[3]
OB4,OUTD[4]
OB5,OUTD[5]
OB6,OUTD[6]
OB7,OUTD[7]
EN
#ININT
ER900000,900000,900000
JS#CLEAR
MG{P2}"E-STOPPED"
MG{P2}
MG{P2}
MG{P2}
MG{P2}
MG{P2}
OP0
ST
AM
MO
RI1
#IN2
CI 1
WT100
WT100
INPUT="*"
#INLOP
IF(HMIINPTS[0]=1)
INPUT=1
ENDIF
JP#INLOP,INPUT="*"
WT100
CI 2
EN
#COMINT
CMD =P2CH
INPUT=P2NM
CI -1
EN1,1
#SCANHMI
IF(RUNONCE=0)
JS#WRITHMI
RUNONCE=1
ENDIF
MBH=,3,1200,2,A[]
floatA=(A[1]*$10000)
float=floatA+A[0]
real=@REAL[float]
SCALE=real
MBH=,3,1240,2,A[]
floatA=(A[1]*$10000)
float=floatA+A[0]
real=@REAL[float]
SPEEDF=real/100
EN
#WRITHMI
JS#MBINIT
Rvar=SCALE
Fvar=@FLOT[Rvar]
hbyte=Fvar&$FFFF0000/$FFFF
lbyte=Fvar&$FFFF
array[1]=hbyte
array[0]=lbyte
MBH=,16,650,2,array[0]
WT100
Rvar=SPEEDF*100
Fvar=@FLOT[Rvar]
hbyte=Fvar&$FFFF0000/$FFFF
lbyte=Fvar&$FFFF
array[1]=hbyte
array[0]=lbyte
MBH=,16,650,2,array[0]
EN
#CMDERR
JS#CLEAR
MG{P2}"ERROR ",_TC
MG{P2}"CHECK CODE LINE: ",_ED0
MG{P2}"Error In Thread ",_ED1
WT2000
EN1
#MOTNIO
JP#MOTNIO,MOTION=0
PTRUNS=511-_LM
OUTD[1]=(@INT[((@FRAC[(OUT[PTRUNS]/10)]*10.01))])
OUTD[2]=(@INT[((@FRAC[(OUT[PTRUNS]/100)]*10.01))])
OUTD[3]=(@INT[((@FRAC[(OUT[PTRUNS]/1000)]*10.01))])
OUTD[4]=(@INT[((@FRAC[(OUT[PTRUNS]/10000)]*10.01))])
OUTD[5]=(@INT[((@FRAC[(OUT[PTRUNS]/100000)]*10.01))])
OUTD[6]=(@INT[((@FRAC[(OUT[PTRUNS]/1000000)]*10.01))])
OUTD[7]=(@INT[((@FRAC[(OUT[PTRUNS]/10000000)]*10.01))])
OB1,OUTD[1]
OB2,OUTD[2]
OB3,OUTD[3]
OB4,OUTD[4]
OB5,OUTD[5]
OB6,OUTD[6]
OB7,OUTD[7]
JP#MOTNIO,MOTION=1
EN
#MBINIT
WTCNT=0
IF(_IHH2<>-2)
    CE2  
ENDIF
MW1
MG{P2}"WAITING FOR HMI"
IHH=192,168,1,5<502>2
#wt
WTCNT=WTCNT+1
IF(WTCNT>50)
    MG{P2}"HMI STILL BOOTING UP"
		WT5000
		JP#RESET
ENDIF
WT100
JP#wt,_IHH2<>-2
EN
#RESET
MG{P2}"Attempting to reconnect..."
WT5000  
JP#MBINIT  
EN
#INCCH
JS#CLEAR
MG{P2}"Change INC"
MG{P2}"Increment "
MG{P2}"1) Change INC"
MG{P2}
MG{P2}
MG{P2}"9} Exit"
JS#IN
IF(INPUT=9)
EN
ENDIF
IF(INPUT=1)
MG{P2}"INC=",INC
MG{P2}"Enter New INC"
JS#IN
INC=INPUT
MG{P2}" New INC =",INC
WT2000
ENDIF
EN
#RETURN
JP#JOGSEL 
EN
